package cmd

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/GoogleCloudPlatform/db-context-enrichment/internal/database"
	"github.com/spf13/cobra"
)

var applyCommentsCmd = &cobra.Command{
	Use:   "apply-comments",
	Short: "Apply SQL statements from a file to the database",
	Long: `Reads SQL statements (typically generated by 'add-comments' or 'delete-comments')
from a specified file and executes them against the target database.
Honors the --dry-run flag; if true, it will report the statements that would be executed without applying them.`,
	Example: `./db_schema_enricher apply-comments --dialect postgres --host localhost --port 5432 --username user --password pass --database financial_db --in_file ./financial_db_comments.sql`,
	RunE:    runApplyComments,
}

func runApplyComments(cmd *cobra.Command, args []string) error {
	cfg := getAppConfig()
	ctx := cmd.Context()

	inputFile := cfg.InputFile
	if inputFile == "" {
		inputFile = cfg.GetDefaultInputFile()
	}

	log.Println("INFO: Starting apply-comments operation", "dialect:", cfg.Database.Dialect, "database:", cfg.Database.DBName, "input-file:", inputFile, "dry-run:", cfg.DryRun)

	if _, err := os.Stat(inputFile); os.IsNotExist(err) {
		return fmt.Errorf("input file not found: %s", inputFile)
	} else if err != nil {
		return fmt.Errorf("error checking input file '%s': %w", inputFile, err)
	}

	content, readErr := os.ReadFile(inputFile)
	if readErr != nil {
		return fmt.Errorf("failed to read input file '%s': %w", inputFile, readErr)
	}

	// Split by newline and filter empty lines/comments
	rawStatements := strings.Split(string(content), "\n")
	var sqlStatements []string
	for _, stmt := range rawStatements {
		trimmedStmt := strings.TrimSpace(stmt)
		if trimmedStmt != "" && !strings.HasPrefix(trimmedStmt, "--") {
			sqlStatements = append(sqlStatements, trimmedStmt)
		}
	}

	if len(sqlStatements) == 0 {
		log.Println("INFO: No executable SQL statements found in the input file. Nothing to apply.")
		return nil
	}

	// Setup Database Connection
	dbAdapter, err := database.New(cfg.Database)
	if err != nil {
		return fmt.Errorf("failed to connect to database: %w", err)
	}
	defer dbAdapter.Close()
	log.Println("INFO: Database connection established successfully.")

	if execErr := dbAdapter.ExecuteSQLStatements(ctx, sqlStatements); execErr != nil {
		return fmt.Errorf("failed to execute SQL statements from '%s': %w. Review database logs for specifics", inputFile, execErr)
	}

	log.Println("INFO: Apply comments operation completed.")
	return nil
}

func init() {
	applyCommentsCmd.Flags().StringVarP(&appCfg.InputFile, "in_file", "i", "", "Path to the input SQL file containing statements to apply (defaults to <database_name>_comments.sql)")
}
